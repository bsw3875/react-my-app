{"version":3,"sources":["component/welcome/Welcome.js","component/clock/Clock.js","component/contact/Contact.js","component/navigation/Navigation.js","jeopardyService.js","component/jeopardy/Jeopardy.js","component/page404/Page404.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","name","Clock","state","date","Date","this","timerId","setInterval","tick","clearInterval","setState","className","toLocaleTimeString","Component","Contact","handleChange","event","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","Navigation","to","JeopardyService","url","client","axios","create","get","Jeopardy","data","score","getQuestion","then","result","getNewQuestion","catagory","title","question","Page404","App","exact","path","render","match","params","component","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f35256d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Welcome(props) {\r\n  return <div> Welcome {props.name}</div>;\r\n}\r\n\r\nexport default Welcome;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Clock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: new Date(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerId = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerId);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <h2 className=\"Clock\">{this.state.date.toLocaleTimeString()}</h2>;\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Contact extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      submitted: false,\r\n      formData: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n      },\r\n    };\r\n  }\r\n  handleChange = (event) => {\r\n    const formData = { ...this.state.formData };\r\n    formData[event.target.name] = event.target.value;\r\n\r\n    this.setState({ formData });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      submitted: true,\r\n    });\r\n  };\r\n\r\n  resetForm = (event) => {\r\n    this.setState({\r\n      submitted: false,\r\n      formData: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.submitted) {\r\n      return (\r\n        <div className=\"Contact\">\r\n          <p>\r\n            Thank you, {this.state.formData.firstName}, for submitting the form.\r\n          </p>\r\n          <button onClick={this.resetForm}>Reset Form</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"Contact\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"firstName\">First name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              value={this.state.formData.firstName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"lastName\">Last name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              value={this.state.formData.lastName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <button>Submit Form</button>\r\n        </form>\r\n\r\n        <div>\r\n          {this.state.formData.firstName}\r\n          <br />\r\n          {this.state.formData.lastName}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navigation(props) {\r\n  return (\r\n    <div className=\"Navigation\">\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/clock\">Clock</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/contact\">Contact</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","//import the axios HTTP client to communicate with the API\r\nimport axios from \"axios\";\r\n\r\nclass JeopardyService {\r\n  constructor(url = \"http://jservice.io/api/random\", client = axios.create()) {\r\n    this.url = url;\r\n    this.client = client;\r\n  }\r\n  getQuestion() {\r\n    return this.client.get(this.url);\r\n  }\r\n}\r\n\r\nexport default JeopardyService;\r\n","import React, { Component } from \"react\";\r\n//import our service\r\nimport JeopardyService from \"../../jeopardyService\";\r\n\r\nclass Jeopardy extends Component {\r\n  //set our initial state and set up our service as this.client on this component\r\n  constructor(props) {\r\n    super(props);\r\n    this.client = new JeopardyService();\r\n    this.state = {\r\n      data: {},\r\n      score: 0,\r\n    };\r\n  }\r\n  //get a new random question from the API and add it to the data object in state\r\n  getNewQuestion() {\r\n    return this.client.getQuestion().then((result) => {\r\n      this.setState({\r\n        data: result.data[0],\r\n      });\r\n    });\r\n  }\r\n  //when the component mounts, get a the first question\r\n  componentDidMount() {\r\n    this.getNewQuestion();\r\n  }\r\n  //display the results on the screen\r\n  render() {\r\n    let catagory = \"loading\";\r\n    if (this.state.data.catagory) {\r\n      catagory = this.state.data.catagory.title;\r\n    }\r\n    return (\r\n      <div>\r\n        <strong>User's Score:</strong>\r\n        {this.state.score} <br />\r\n        <strong>Question:</strong>\r\n        {this.state.data.question} <br />\r\n        <strong>Value:</strong>\r\n        {this.state.data.value} <br />\r\n        <strong>Catagory:</strong>\r\n        {catagory}\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Jeopardy;\r\n","import React from \"react\";\r\n\r\nfunction Page404() {\r\n  return <div className=\"Page404\">404 Not Found</div>;\r\n}\r\nexport default Page404;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Welcome from \"./component/welcome/Welcome\";\nimport Clock from \"./component/clock/Clock\";\nimport Contact from \"./component/contact/Contact\";\nimport Navigation from \"./component/navigation/Navigation\";\nimport Jeopardy from \"./component/jeopardy/Jeopardy\";\nimport Page404 from \"./component/page404/Page404\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={(props) => <Welcome {...props} name=\"Phil\" />}\n        />\n        <Route\n          exact\n          path=\"/welcome/:name\"\n          render={(props) => (\n            <Welcome {...props} name={props.match.params.name} />\n          )}\n        />\n        <Route path=\"/jeopardy\" component={Jeopardy} />\n        <Route path=\"/clock\" component={Clock} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route component={Page404} />\n      </Switch>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/react-my-app\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}